// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftLearnV1.Helpers;

namespace SoftLearnV1.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201205184133_scoreMigrationProd")]
    partial class scoreMigrationProd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SoftLearnV1.Entities.AcademicSessions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("DateStart");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsCurrent");

                    b.Property<long>("SchoolId");

                    b.Property<long>("SessionId");

                    b.Property<long>("TermId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TermId");

                    b.HasIndex("UserId");

                    b.ToTable("AcademicSessions");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.BehavioralScores", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdmissionNumber");

                    b.Property<long>("CampusId");

                    b.Property<long>("ClassGradeId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateUploaded");

                    b.Property<long>("MarkObtainable");

                    b.Property<long>("MarkObtained");

                    b.Property<long>("SchoolId");

                    b.Property<long>("ScoreCategoryId");

                    b.Property<long>("ScoreSubCategoryId");

                    b.Property<long>("SessionId");

                    b.Property<Guid>("StudentId");

                    b.Property<long>("TermId");

                    b.Property<Guid>("UploadedById");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("ScoreCategoryId");

                    b.HasIndex("ScoreSubCategoryId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TermId");

                    b.HasIndex("UploadedById");

                    b.ToTable("BehavioralScores");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CartReferenceId");

                    b.Property<string>("CouponCode");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("IsCheckedOut");

                    b.Property<Guid?>("LearnerId");

                    b.Property<long>("SubTotal");

                    b.Property<long>("TotalAmountPayable");

                    b.Property<long>("TotalCourse");

                    b.HasKey("Id");

                    b.HasIndex("LearnerId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CartItems", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CartId");

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("DateCreated");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("CourseId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ClassGrades", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("GradeName");

                    b.Property<long>("SchoolId");

                    b.Property<bool>("isAssignedToTeacher");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.ToTable("ClassGrades");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Classes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<string>("ClassName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("SchoolId");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ContinousAssessmentScores", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdmissionNumber");

                    b.Property<long>("CampusId");

                    b.Property<long>("ClassGradeId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateUploaded");

                    b.Property<long?>("DepartmentId");

                    b.Property<long>("MarkObtainable");

                    b.Property<long>("MarkObtained");

                    b.Property<long>("SchoolId");

                    b.Property<long>("ScoreCategoryId");

                    b.Property<long>("ScoreSubCategoryId");

                    b.Property<long>("SessionId");

                    b.Property<Guid>("StudentId");

                    b.Property<long>("SubjectId");

                    b.Property<long>("TermId");

                    b.Property<Guid>("UploadedById");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("ScoreCategoryId");

                    b.HasIndex("ScoreSubCategoryId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TermId");

                    b.HasIndex("UploadedById");

                    b.ToTable("ContinousAssessmentScores");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CouponCodes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CouponCode");

                    b.Property<long>("CouponPercentage");

                    b.Property<Guid?>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid>("SuperAdminId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("CouponCodes");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryDescription");

                    b.Property<string>("CategoryImageUrl");

                    b.Property<string>("CourseCategoryName");

                    b.HasKey("Id");

                    b.ToTable("CourseCategory");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryImageUrl = "http://res.cloudinary.com/mywebsite/image/upload/v1601055911/Softlearn/course_category_Images/angularjs.jpg.jpg",
                            CourseCategoryName = "Design"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryImageUrl = "http://res.cloudinary.com/mywebsite/image/upload/v1601055911/Softlearn/course_category_Images/reactjs.jpg.jpg",
                            CourseCategoryName = "Networking"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryImageUrl = "http://res.cloudinary.com/mywebsite/image/upload/v1601055911/Softlearn/course_category_Images/wordpress.jpg.jpg",
                            CourseCategoryName = "Painting"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryImageUrl = "http://res.cloudinary.com/mywebsite/image/upload/v1601055911/Softlearn/course_category_Images/photoshop.jpg.jpg",
                            CourseCategoryName = "Advertising"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryImageUrl = "https://res.cloudinary.com/mywebsite/image/upload/v1603445237/softlearn/course_category_images/marketing_ekmzwf.jpg",
                            CourseCategoryName = "Marketing"
                        });
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseEnrolledPayments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Amount");

                    b.Property<long>("CartId");

                    b.Property<string>("Channel");

                    b.Property<DateTime>("Created_At");

                    b.Property<string>("Currency");

                    b.Property<string>("GatewayResponse");

                    b.Property<Guid>("LearnerId");

                    b.Property<string>("Message");

                    b.Property<DateTime>("Paid_At");

                    b.Property<string>("Reference");

                    b.Property<string>("Status");

                    b.Property<string>("TransactionId");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("LearnerId");

                    b.ToTable("CourseEnrolledPayments");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseEnrollees", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("DateEnrolled");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsInProgress");

                    b.Property<Guid>("LearnerId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LearnerId");

                    b.ToTable("CourseEnrollees");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseLevelTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LevelTypeName");

                    b.HasKey("Id");

                    b.ToTable("CourseLevelTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LevelTypeName = "Primary/Elementary"
                        },
                        new
                        {
                            Id = 2L,
                            LevelTypeName = "Secondary/Higher"
                        },
                        new
                        {
                            Id = 3L,
                            LevelTypeName = "University/Adult"
                        },
                        new
                        {
                            Id = 4L,
                            LevelTypeName = "All"
                        });
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseObjectives", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Objective");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseObjectives");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseQuiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("Duration");

                    b.Property<long>("PercentagePassMark");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseQuiz");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseQuizQuestions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<long>("CourseQuizId");

                    b.Property<string>("Option1");

                    b.Property<string>("Option2");

                    b.Property<string>("Option3");

                    b.Property<string>("Option4");

                    b.Property<string>("Question");

                    b.Property<long>("QuestionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CourseQuizId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("CourseQuizQuestions");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseQuizResults", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseQuizId");

                    b.Property<DateTime>("DateTaken");

                    b.Property<Guid>("LearnerId");

                    b.Property<long>("NoOfQuestions");

                    b.Property<decimal>("PercentageScore");

                    b.Property<long>("RightAnswers");

                    b.Property<long>("Score");

                    b.Property<string>("Status");

                    b.Property<long>("WrongAnswers");

                    b.HasKey("Id");

                    b.HasIndex("CourseQuizId");

                    b.HasIndex("LearnerId");

                    b.ToTable("CourseQuizResults");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseRatings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("DateRated");

                    b.Property<Guid>("LearnerId");

                    b.Property<long>("RatingValue");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LearnerId");

                    b.ToTable("CourseRatings");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseRequirements", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Requirement");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseRequirements");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseReviews", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("DateReviewed");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("LearnerId");

                    b.Property<string>("ReviewNote");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LearnerId");

                    b.ToTable("CourseReviews");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseSubCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseCategoryId");

                    b.Property<string>("CourseSubCategoryDescription");

                    b.Property<string>("CourseSubCategoryImageUrl");

                    b.Property<string>("CourseSubCategoryName");

                    b.HasKey("Id");

                    b.HasIndex("CourseCategoryId");

                    b.ToTable("CourseSubCategory");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseTopicMaterials", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseId");

                    b.Property<long>("CourseTopicId");

                    b.Property<DateTime>("DateUploaded");

                    b.Property<string>("Description");

                    b.Property<Guid>("FacilitatorId");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<string>("FileUrl");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("NoOfPages");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseTopicId");

                    b.HasIndex("FacilitatorId");

                    b.ToTable("CourseTopicMaterials");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseTopicQuiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseId");

                    b.Property<long>("CourseTopicId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("Duration");

                    b.Property<long>("PercentagePassMark");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseTopicId");

                    b.ToTable("CourseTopicQuiz");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseTopicQuizQuestions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<long>("CourseTopicQuizId");

                    b.Property<string>("Option1");

                    b.Property<string>("Option2");

                    b.Property<string>("Option3");

                    b.Property<string>("Option4");

                    b.Property<string>("Question");

                    b.Property<long>("QuestionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CourseTopicQuizId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("CourseTopicQuizQuestions");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseTopicQuizResults", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseTopicQuizId");

                    b.Property<DateTime>("DateTaken");

                    b.Property<Guid>("LearnerId");

                    b.Property<long>("NoOfQuestions");

                    b.Property<decimal>("PercentageScore");

                    b.Property<long>("RightAnswers");

                    b.Property<long>("Score");

                    b.Property<string>("Status");

                    b.Property<long>("WrongAnswers");

                    b.HasKey("Id");

                    b.HasIndex("CourseTopicQuizId");

                    b.HasIndex("LearnerId");

                    b.ToTable("CourseTopicQuizResults");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseTopicVideos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseId");

                    b.Property<long>("CourseTopicId");

                    b.Property<DateTime>("DateUploaded");

                    b.Property<string>("Description");

                    b.Property<string>("Duration");

                    b.Property<Guid>("FacilitatorId");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<string>("FileUrl");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsVerified");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseTopicId");

                    b.HasIndex("FacilitatorId");

                    b.ToTable("CourseTopicVideos");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseTopics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Duration");

                    b.Property<Guid>("FacilitatorId");

                    b.Property<string>("Topic");

                    b.Property<string>("TopicDescription");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FacilitatorId");

                    b.ToTable("CourseTopics");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseTypeName");

                    b.HasKey("Id");

                    b.ToTable("CourseType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CourseTypeName = "Paid"
                        },
                        new
                        {
                            Id = 2L,
                            CourseTypeName = "Free"
                        });
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Courses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseAmount");

                    b.Property<long>("CourseCategoryId");

                    b.Property<string>("CourseDescription");

                    b.Property<string>("CourseImageUrl");

                    b.Property<string>("CourseName");

                    b.Property<long>("CourseSubCategoryId");

                    b.Property<string>("CourseSubTitle");

                    b.Property<long>("CourseTypeId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<Guid>("FacilitatorId");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsVerified");

                    b.Property<long>("LevelTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CourseCategoryId");

                    b.HasIndex("CourseSubCategoryId");

                    b.HasIndex("CourseTypeId");

                    b.HasIndex("FacilitatorId");

                    b.HasIndex("LevelTypeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.EmailConfirmationCodes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateGenerated");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("EmailConfirmationCodes");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ErrorDate");

                    b.Property<string>("ErrorMessage");

                    b.Property<string>("ErrorSource");

                    b.Property<string>("ErrorStackTrace");

                    b.HasKey("Id");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ExaminationScores", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdmissionNumber");

                    b.Property<long>("CampusId");

                    b.Property<long>("ClassGradeId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateUploaded");

                    b.Property<long?>("DepartmentId");

                    b.Property<long>("MarkObtainable");

                    b.Property<long>("MarkObtained");

                    b.Property<long>("SchoolId");

                    b.Property<long>("ScoreCategoryId");

                    b.Property<long>("ScoreSubCategoryId");

                    b.Property<long>("SessionId");

                    b.Property<Guid>("StudentId");

                    b.Property<long>("SubjectId");

                    b.Property<long>("TermId");

                    b.Property<Guid>("UploadedById");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("ScoreCategoryId");

                    b.HasIndex("ScoreSubCategoryId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TermId");

                    b.HasIndex("UploadedById");

                    b.ToTable("ExaminationScores");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ExtraCurricularScores", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdmissionNumber");

                    b.Property<long>("CampusId");

                    b.Property<long>("ClassGradeId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateUploaded");

                    b.Property<long>("MarkObtainable");

                    b.Property<long>("MarkObtained");

                    b.Property<long>("SchoolId");

                    b.Property<long>("ScoreCategoryId");

                    b.Property<long>("ScoreSubCategoryId");

                    b.Property<long>("SessionId");

                    b.Property<Guid>("StudentId");

                    b.Property<long>("TermId");

                    b.Property<Guid>("UploadedById");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("ScoreCategoryId");

                    b.HasIndex("ScoreSubCategoryId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TermId");

                    b.HasIndex("UploadedById");

                    b.ToTable("ExtraCurricularScores");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.FacilitatorAccountDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountName");

                    b.Property<long>("AccountNumber");

                    b.Property<string>("BankName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("FacilitatorId");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.HasIndex("FacilitatorId");

                    b.ToTable("FacilitatorAccountDetails");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Facilitators", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio");

                    b.Property<string>("CertificateObtained");

                    b.Property<string>("CourseOfStudy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("InstitutionAttended");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastPasswordChangedDate");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Profession");

                    b.Property<string>("ProfilePictureUrl");

                    b.Property<string>("Salt");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Facilitators");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ForgotPasswordCodes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateGenerated");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ForgotPasswordCodes");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.GradeStudents", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<long>("ClassGradeId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("HasGraduated");

                    b.Property<long>("SchoolId");

                    b.Property<long>("SessionId");

                    b.Property<Guid>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("GradeStudents");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.GradeTeachers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<long>("ClassGradeId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("SchoolId");

                    b.Property<Guid>("SchoolUserId");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolUserId");

                    b.ToTable("GradeTeachers");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Learners", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastPasswordChangedDate");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<long>("LevelTypeId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePictureUrl");

                    b.Property<string>("Salt");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("LevelTypeId");

                    b.ToTable("Learners");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.LessonAssessment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssessmentName");

                    b.Property<long>("CampusId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("Duration");

                    b.Property<bool>("IsActive");

                    b.Property<long>("LessonId");

                    b.Property<long>("PassMark");

                    b.Property<long>("SchoolId");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("LessonId");

                    b.HasIndex("SchoolId");

                    b.ToTable("LessonAssessments");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.LessonAssignments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateUploaded");

                    b.Property<string>("Description");

                    b.Property<DateTime>("DueDate");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<string>("FileUrl");

                    b.Property<bool>("IsActive");

                    b.Property<long>("LessonId");

                    b.Property<long>("PassMark");

                    b.Property<Guid>("SchoolUserId");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("SchoolUserId");

                    b.ToTable("LessonAssignments");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.LessonAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AttendanceDate");

                    b.Property<long>("CampusId");

                    b.Property<bool>("IsAbsent");

                    b.Property<bool>("IsPresent");

                    b.Property<long>("LessonId");

                    b.Property<long>("SchoolId");

                    b.Property<Guid>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("LessonId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonAttendance");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.LessonMaterials", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateUploaded");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<string>("FileUrl");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsVerified");

                    b.Property<long>("LessonId");

                    b.Property<Guid>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeacherId");

                    b.ToTable("LessonMaterials");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.LessonSubmittedAssignments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateSubmitted");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<string>("FileUrl");

                    b.Property<long>("LessonId");

                    b.Property<Guid>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonSubmittedAssignments");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.LessonVideos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateUploaded");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<string>("FileUrl");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsVerified");

                    b.Property<long>("LessonId");

                    b.Property<Guid>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeacherId");

                    b.ToTable("LessonVideos");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.MostViewedCourses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CourseId");

                    b.Property<DateTime>("DateViewed");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("MostViewedCourses");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Parents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastPasswordChangedDate");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Salt");

                    b.Property<long>("SchoolId");

                    b.Property<string>("UserName");

                    b.Property<bool>("hasChild");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ParentsStudentsMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<Guid>("ParentId");

                    b.Property<long>("SchoolId");

                    b.Property<Guid>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("StudentId");

                    b.ToTable("ParentsStudentsMap");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.PaymentMethods", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("MethodName");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.QuestionTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("QuestionTypeName");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            QuestionTypeName = "Multiple Choice"
                        },
                        new
                        {
                            Id = 2L,
                            QuestionTypeName = "Fill in the Gap"
                        },
                        new
                        {
                            Id = 3L,
                            QuestionTypeName = "True or False"
                        });
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastPasswordChangedDate");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Salt");

                    b.Property<long>("SchoolId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolAdmin");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolCampuses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CampusAddress");

                    b.Property<string>("CampusName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("IsActive");

                    b.Property<long>("SchoolId");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolCampuses");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("SchoolCode");

                    b.Property<string>("SchoolName");

                    b.Property<long>("SchoolTypeId");

                    b.HasKey("Id");

                    b.HasIndex("SchoolTypeId");

                    b.ToTable("SchoolInformation");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName");

                    b.HasKey("Id");

                    b.ToTable("SchoolRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RoleName = "Super Administrator"
                        },
                        new
                        {
                            Id = 2L,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            Id = 3L,
                            RoleName = "Class Teacher"
                        },
                        new
                        {
                            Id = 4L,
                            RoleName = "Subject Teacher"
                        });
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolSubjects", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<long?>("DepartmentId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAssignedToClass");

                    b.Property<bool>("IsAssignedToTeacher");

                    b.Property<long>("MaximumScore");

                    b.Property<long>("ReportCardOrder");

                    b.Property<long>("SchoolId");

                    b.Property<string>("SubjectCode");

                    b.Property<string>("SubjectName");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolSubjects");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SchoolTypeName");

                    b.HasKey("Id");

                    b.ToTable("SchoolType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            SchoolTypeName = "Nursery"
                        },
                        new
                        {
                            Id = 2L,
                            SchoolTypeName = "Primary"
                        },
                        new
                        {
                            Id = 3L,
                            SchoolTypeName = "Secondary"
                        });
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolUserRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("SchoolUserRoles");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastPasswordChangedDate");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Salt");

                    b.Property<long>("SchoolId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolUsers");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolsSubscriptionInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AmountPaid");

                    b.Property<DateTime>("DatePaid");

                    b.Property<DateTime>("DueDate");

                    b.Property<long>("Duration");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsVerified");

                    b.Property<long>("PaymentMethodId");

                    b.Property<long>("SchoolId");

                    b.Property<long>("SubscriptionPlanId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("SchoolsSubscriptionInfo");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ScoreCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<DateTime>("DateCreated");

                    b.HasKey("Id");

                    b.ToTable("ScoreCategory");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryName = "Exam",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CategoryName = "CA",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CategoryName = "Behavioural",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CategoryName = "Extra Curricular",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ScoreCategoryConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<long>("CategoryId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("SchoolId");

                    b.Property<long>("SessionId");

                    b.Property<long>("TermId");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TermId");

                    b.ToTable("ScoreCategoryConfig");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ScoreGrading", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Grade");

                    b.Property<long>("HighestRange");

                    b.Property<long>("LowestRange");

                    b.Property<string>("Remark");

                    b.Property<long>("SchoolId");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.ToTable("ScoreGrading");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ScoreSubCategoryConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<long>("CategoryId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("SchoolId");

                    b.Property<long>("ScoreCategoryId");

                    b.Property<long>("ScoreObtainable");

                    b.Property<long>("SessionId");

                    b.Property<string>("SubCategory");

                    b.Property<long>("TermId");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("ScoreCategoryId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TermId");

                    b.ToTable("ScoreSubCategoryConfig");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Sessions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("SchoolId");

                    b.Property<string>("SessionName");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Students", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdmissionNumber");

                    b.Property<long>("CampusId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAssignedToClass");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastPasswordChangedDate");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Salt");

                    b.Property<long>("SchoolId");

                    b.Property<string>("UserName");

                    b.Property<bool>("hasParent");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SubjectDepartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("DepartmentName");

                    b.Property<long>("SchoolId");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SubjectDepartment");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SubjectTeachers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<long>("ClassGradeId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("SchoolId");

                    b.Property<Guid>("SchoolUserId");

                    b.Property<long>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolUserId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectTeachers");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SubscriptionPlanFee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<long>("Fee");

                    b.Property<long>("SubscriptionPlanId");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("SubscriptionPlanFee");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SubscriptionPlans", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("PlanName");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SuperAdministrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastPasswordChangedDate");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Salt");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("SuperAdministrator");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.TeacherLessons", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<long>("ClassGradeId");

                    b.Property<long>("ClassId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("Duration");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsVerified");

                    b.Property<long>("LessonName");

                    b.Property<long>("SchoolId");

                    b.Property<Guid>("SchoolUserId");

                    b.Property<long>("StartTime");

                    b.Property<long>("SubjectId");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("ClassGradeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolUserId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TeacherLessons");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Teachers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CampusId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAssignedSubjects");

                    b.Property<bool>("IsAssignedToClass");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<DateTime>("LastPasswordChangedDate");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<long>("SchoolId");

                    b.Property<Guid>("SchoolUserId");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolUserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Terms", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TermName");

                    b.HasKey("Id");

                    b.ToTable("Terms");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            TermName = "1st Term"
                        },
                        new
                        {
                            Id = 2L,
                            TermName = "2nd Term"
                        },
                        new
                        {
                            Id = 3L,
                            TermName = "3rd Term"
                        });
                });

            modelBuilder.Entity("SoftLearnV1.Entities.UsedCouponCodes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CartId");

                    b.Property<string>("CouponCode");

                    b.Property<DateTime>("DateUsed");

                    b.Property<Guid>("LearnerId");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("LearnerId");

                    b.ToTable("UsedCouponCodes");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.AcademicSessions", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.BehavioralScores", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ScoreCategoryConfig", "ScoreCategoryConfig")
                        .WithMany()
                        .HasForeignKey("ScoreCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ScoreSubCategoryConfig", "ScoreSubCategoryConfig")
                        .WithMany()
                        .HasForeignKey("ScoreSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Cart", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Learners", "Learners")
                        .WithMany()
                        .HasForeignKey("LearnerId");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CartItems", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ClassGrades", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Classes", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ContinousAssessmentScores", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SubjectDepartment", "SubjectDepartment")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ScoreCategoryConfig", "ScoreCategoryConfig")
                        .WithMany()
                        .HasForeignKey("ScoreCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ScoreSubCategoryConfig", "ScoreSubCategoryConfig")
                        .WithMany()
                        .HasForeignKey("ScoreSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolSubjects", "SchoolSubjects")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CouponCodes", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SuperAdministrator", "SuperAdministrator")
                        .WithMany()
                        .HasForeignKey("CreatedById");
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseEnrolledPayments", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Learners", "Learners")
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseEnrollees", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Learners", "Learners")
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseObjectives", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseQuiz", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseQuizQuestions", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.CourseQuiz", "CourseQuiz")
                        .WithMany()
                        .HasForeignKey("CourseQuizId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.QuestionTypes", "QuestionTypes")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseQuizResults", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.CourseQuiz", "CourseQuiz")
                        .WithMany()
                        .HasForeignKey("CourseQuizId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Learners", "Learners")
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseRatings", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Learners", "Learners")
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseRequirements", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseReviews", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Learners", "Learners")
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseSubCategory", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.CourseCategory", "CourseCategory")
                        .WithMany("CourseSubCategory")
                        .HasForeignKey("CourseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseTopicMaterials", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.CourseTopics", "CourseTopics")
                        .WithMany("CourseTopicMaterials")
                        .HasForeignKey("CourseTopicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Facilitators", "Facilitators")
                        .WithMany()
                        .HasForeignKey("FacilitatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseTopicQuiz", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.CourseTopics", "CourseTopics")
                        .WithMany()
                        .HasForeignKey("CourseTopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseTopicQuizQuestions", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.CourseTopicQuiz", "CourseTopicQuiz")
                        .WithMany()
                        .HasForeignKey("CourseTopicQuizId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.QuestionTypes", "QuestionTypes")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseTopicQuizResults", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.CourseTopicQuiz", "CourseTopicQuiz")
                        .WithMany()
                        .HasForeignKey("CourseTopicQuizId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Learners", "Learners")
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseTopicVideos", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.CourseTopics", "CourseTopics")
                        .WithMany("CourseTopicVideos")
                        .HasForeignKey("CourseTopicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Facilitators", "Facilitators")
                        .WithMany()
                        .HasForeignKey("FacilitatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.CourseTopics", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Facilitators", "Facilitators")
                        .WithMany()
                        .HasForeignKey("FacilitatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Courses", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.CourseCategory", "CourseCategory")
                        .WithMany()
                        .HasForeignKey("CourseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.CourseSubCategory", "CourseSubCategory")
                        .WithMany()
                        .HasForeignKey("CourseSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.CourseType", "CourseType")
                        .WithMany()
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Facilitators", "Facilitators")
                        .WithMany("Courses")
                        .HasForeignKey("FacilitatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.CourseLevelTypes", "CourseLevelTypes")
                        .WithMany()
                        .HasForeignKey("LevelTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ExaminationScores", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SubjectDepartment", "SubjectDepartment")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ScoreCategoryConfig", "ScoreCategoryConfig")
                        .WithMany()
                        .HasForeignKey("ScoreCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ScoreSubCategoryConfig", "ScoreSubCategoryConfig")
                        .WithMany()
                        .HasForeignKey("ScoreSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolSubjects", "SchoolSubjects")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ExtraCurricularScores", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ScoreCategoryConfig", "ScoreCategoryConfig")
                        .WithMany()
                        .HasForeignKey("ScoreCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ScoreSubCategoryConfig", "ScoreSubCategoryConfig")
                        .WithMany()
                        .HasForeignKey("ScoreSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.FacilitatorAccountDetails", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Facilitators", "Facilitators")
                        .WithMany()
                        .HasForeignKey("FacilitatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.GradeStudents", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.GradeTeachers", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("SchoolUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Learners", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.CourseLevelTypes", "CourseLevelTypes")
                        .WithMany()
                        .HasForeignKey("LevelTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.LessonAssessment", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.TeacherLessons", "TeacherLessons")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.LessonAssignments", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.TeacherLessons", "TeacherLessons")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("SchoolUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.LessonAttendance", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.TeacherLessons", "TeacherLessons")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.LessonMaterials", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.TeacherLessons", "TeacherLessons")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolAdmin", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.LessonSubmittedAssignments", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.TeacherLessons", "TeacherLessons")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.LessonVideos", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.TeacherLessons", "TeacherLessons")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolAdmin", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.MostViewedCourses", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Parents", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ParentsStudentsMap", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Parents", "Parents")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolAdmin", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolCampuses", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolInformation", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolType", "SchoolType")
                        .WithMany()
                        .HasForeignKey("SchoolTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolSubjects", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SubjectDepartment", "SubjectDepartment")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolUserRoles", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolRoles", "SchoolRoles")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolUsers", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SchoolsSubscriptionInfo", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.PaymentMethods", "PaymentMethods")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SubscriptionPlans", "SubscriptionPlans")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ScoreCategoryConfig", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ScoreCategory", "ScoreCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ScoreGrading", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.ScoreSubCategoryConfig", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ScoreCategory", "ScoreCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ScoreCategoryConfig", "ScoreCategoryConfig")
                        .WithMany()
                        .HasForeignKey("ScoreCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Sessions", "Sessions")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Terms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Sessions", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Students", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SubjectDepartment", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SubjectTeachers", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("SchoolUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolSubjects", "SchoolSubjects")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.SubscriptionPlanFee", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SubscriptionPlans", "SubscriptionPlans")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.TeacherLessons", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.ClassGrades", "ClassGrades")
                        .WithMany()
                        .HasForeignKey("ClassGradeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("SchoolUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolSubjects", "SchoolSubjects")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.Teachers", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.SchoolCampuses", "SchoolCampuses")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolInformation", "SchoolInformation")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.SchoolUsers", "SchoolUsers")
                        .WithMany()
                        .HasForeignKey("SchoolUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoftLearnV1.Entities.UsedCouponCodes", b =>
                {
                    b.HasOne("SoftLearnV1.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoftLearnV1.Entities.Learners", "Learners")
                        .WithMany()
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
